#Api2

module("pulsectl")
module("alsactl")

Var volume_thresholds = [80, 50, 0];
Var volume_icons = [
  "audio-volume-high",
  "audio-volume-medium",
  "audio-volume-low"
];
Var volume_muted = "audio-volume-muted";

Private {

  Var XVolumeSinkMenuTmpl = "Menu('XVolumeSinkMenu') {
    Item('@SINK_DESC@',
        { VolumeCtl(Extract(WidgetId(),'(.*)_menu'),
          'client-set-sink @SINK_NAME@') },
        '@SINK_NAME@')
  }"

  Var XVolumeControlTmpl = "
  grid 'volume_section_@DEVICE_IFACE@' {
    grid '@DEVICE_ID@' {
      style = 'volume_grid'
      image '@DEVICE_ID@_mute' {
        value = If(Volume('@DEVICE_IFACE@-mute','@DEVICE_ID@'), volume_muted,
              ArrayLookup(Volume('@DEVICE_IFACE@-volume','@DEVICE_ID@'),
                volume_thresholds, volume_icons, volume_muted))
        style = 'volume_mute';
        action = {VolumeCtl('@DEVICE_ID@', '@DEVICE_IFACE@-mute toggle')}
        trigger = 'volume';
        loc (1,1,1,1)
      }
      image '@DEVICE_ID@_expand' {
        value = 'pan-end'
        style = 'volume_control_expander'
        tooltip = GT('expand/collapse channels')
        action = XVolumeToggleChannels()
        loc(2,1,1,1)
      }
      label '@DEVICE_ID@_name' {
        style = 'volume_device_name'
        value = VolumeInfo('@DEVICE_IFACE@-description','@DEVICE_ID@')
        trigger = 'volume'
        action[3] = Menu('XVolumeDeviceMenu')
        loc (3,1,1,1)
      }
      grid '@DEVICE_ID@_misc' {
        loc(4,1,1,1)
        image '@DEVICE_ID@_set_default' {
          value = If(Volume('@DEVICE_IFACE@-is-default-device','@DEVICE_ID@'),
              'checkbox-checked', 'checkbox')
          style = If('@DEVICE_IFACE@' = 'sink' & Volume('sink-count')>1,
              'volume_default', 'hidden')
          tooltip = GT('set as default') + ' @DEVICE_IFACE@'
          trigger = 'volume'
          action = VolumeCtl('@DEVICE_IFACE@-set-default-device @DEVICE_ID@')
        }
        image '@DEVICE_ID@_menu' {
          value = 'open-menu'
          style = If('@DEVICE_IFACE@' = 'client' & Volume('sink-count')>1,
              'volume_client_menu', 'hidden')
          tooltip = GT('route to sink')
          action = Menu('XVolumeSinkMenu')
          trigger = 'volume'
        }
      }
      scale '@DEVICE_ID@_volume' {
        style = 'volume_scale'
        value = Volume('@DEVICE_IFACE@-volume','@DEVICE_ID@')/100
        action[1] = VolumeCtl('@DEVICE_ID@',
          '@DEVICE_IFACE@-volume ' + Str(GtkEvent('dir') * 100))
        trigger = 'volume'
        loc (1,2,4,1)
      }
      grid '@DEVICE_ID@_channels' {
        style = 'hidden'
        loc(1,3,4,1)
      }
    }
  }"

  Var XVolumeChannelTmpl = "
    grid '@DEVICE_ID@_channels' {
      label '@DEVICE_ID@-@CHANNEL_ID@_label' {
        value = '@CHANNEL_ID@'
        style = 'volume_channel_name'
        loc(1,@CHANNEL_NUM@,1,1)
      }
      scale '@DEVICE_ID@-@CHANNEL_ID@_scale' {
        style = 'volume_scale'
        value = Volume('@DEVICE_IFACE@-volume','@DEVICE_ID@:@CHANNEL_ID@')/100
        action[1] = VolumeCtl('@DEVICE_ID@:@CHANNEL_ID@',
          '@DEVICE_IFACE@-volume ' + Str(GtkEvent('dir') * 100))
        trigger = 'volume'
        loc(2,@CHANNEL_NUM@,1,1)
      }
    }"

  Menu('XVolumeDeviceMenu') {
    Item(GT("Set As Default Control Interface"),
        { VolumeCtl('sink-set-default ' + Extract(WidgetId(), '(.*)_name')) } )
  }

  Function XVolumeToggleChannels() {
    Var DeviceId = Extract(WidgetId(), "(.*)_expand");
    Var State = WidgetState(1)
    Var DeviceTmpl = "
      image '@DEVICE_ID@_expand' { value = '%EXPAND_ICON%' }
      scale '@DEVICE_ID@_volume' { style = '%VOLUME_STYLE%' }
      grid '@DEVICE_ID@_channels' { style = '%CHANNELS_STYLE%' }"

    Config(ReplaceAll(DeviceTmpl, "@DEVICE_ID@", DeviceID,
      "%EXPAND_ICON%", If(State, "pan-end", "pan-down"),
      "%VOLUME_STYLE%", If(State, "volume_scale", "hidden"),
      "%CHANNELS_STYLE%", If(State, "hidden", "volume_channel_list")));

    UserState(WidgetId(),If(State, "off", "on"))
  }

  Function XVolumeChannelHandler() {
    Var i;

    If interface = "sink" | interface = "client" {
      Config(ReplaceAll(XVolumeControlTmpl,
          "@DEVICE_ID@", device_id,
          "@DEVICE_IFACE@", interface))
      i = 0;
      While i < arraysize(channel_indices) {
        Config(ReplaceAll(XVolumeChannelTmpl,
          "@DEVICE_ID@", device_id,
          "@CHANNEL_ID@", channel_ids[i],
          "@CHANNEL_NUM@", channel_indices[i],
          "@DEVICE_IFACE@", interface))
        i = i + 1;
      }
    }
    MenuItemClear(device_id)
    If interface = "sink"
      Config(ReplaceAll($XVolumeSinkMenuTmpl, "@SINK_NAME@", device_id,
          "@SINK_DESC@", VolumeInfo("sink-description", device_id)))
  }

  Function XVolumeChannelRemove() {
    ClearWidget(device_id)
    MenuItemClear(device_id)
  }

  TriggerAction "volume-conf", XVolumeChannelHandler()
  TriggerAction "volume-conf-removed", XVolumeChannelRemove()

  PopUp "XVolumeWindow" {
    style = "volume_popup"
    label {
      value = GT("sinks")
      style = If(Volume("sink-count")>0, "volume_separator", "hidden")
      trigger = "volume"
    }
    grid "volume_section_sink" {
      style = "volume_section"
    }
    label {
      value = GT("clients")
      style = If(Volume("client-count")>0, "volume_separator", "hidden")
      trigger = "volume"
    }
    grid "volume_section_client" {
      style = "volume_section"
    }
  }
}

#CSS

window#XVolumeWindow {
  background: rgba(0,0,0,0);
}

grid#volume_popup {
  border-radius: 10px;
  border: 1px solid @borders;
  margin: 5px;
  padding: 10px;
  background-color: @theme_bg_color;
  -GtkWidget-hexpand: true;
  -GtkWidget-vexpand: false;
  -GtkWidget-direction: bottom;
}

image#volume_control_expander,
image#volume_default,
image#volume_client_menu,
image#volume_mute {
  color: @theme_fg_color;
  padding: 3px;
  min-width: 16px;
  min-height: 16px;
  -GtkWidget-hexpand: false;
  -GtkWidget-halign: start;
}

#volume_scale {
  margin: 5px;
  -GtkWidget-direction: right;
  -GtkWidget-valign: center;
  -GtkWidget-hexpand: true;
}

#volume_scale progress,
#volume_scale trough {
  min-height: 10px;
}

label#volume_separator {
  padding-top: 3px;
  font-size: 10px;
  -GtkWidget-align: 0.0;
  -GtkWidget-hexpand: true;
  border-bottom: dashed 1px @border;
  min-height: 20px;
}

grid#volume_section {
  -GtkWidget-hexpand: true;
  -GtkWidget-direction: bottom;
}
#volume_device_name {
  -GtkWidget-hexpand: true;
  -GtkWidget-align: 0;
  -GtkWidget-halign: start;
}

#volume_control_expander {
  -GtkWidget-halign: start;
}

#volume_channel_list {
  -GtkWidget-direction: bottom;
}

#volume_grid {
  -GtkWidget-hexpand: true;
}

#volume_channel_name {
  -GtkWidget-halign: start;
}
